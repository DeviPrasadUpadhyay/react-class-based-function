{"ast":null,"code":"var _jsxFileName = \"/Users/enrique/Downloads/classBasedComp/src/components/UserFinder.js\";\n//\n// import { Fragment, useState, useEffect } from \"react\";\n\n// import Users from \"./Users\";\n\n// import classes from \"./UserFinder.module.css\";\n\n// const DUMMY_USERS = [\n// \t{ id: \"u1\", name: \"Max\" },\n// \t{ id: \"u2\", name: \"Manuel\" },\n// \t{ id: \"u3\", name: \"Julie\" },\n// ];\n\n// const UserFinder = () => {\n// \tconst [filteredUsers, setFilteredUsers] = useState(DUMMY_USERS);\n\n// \tconst [searchTerm, setSearchTerm] = useState(\"\");\n\n// \tuseEffect(() => {\n// \t\tsetFilteredUsers(DUMMY_USERS.filter((user) => user.name.includes(searchTerm)));\n// \t}, [searchTerm]);\n\n// \tconst searchChangeHandler = (event) => {\n// \t\tsetSearchTerm(event.target.value);\n// \t};\n\n// \treturn (\n// \t\t<Fragment>\n// \t\t\t<div className={classes.finder}>\n// \t\t\t\t<input type=\"search\" onChange={searchChangeHandler} />\n// \t\t\t</div>\n// \t\t\t<Users users={filteredUsers} />\n// \t\t</Fragment>\n// \t);\n// };\n\n// export default UserFinder;\n\nimport { Fragment, Component } from \"react\";\nimport Users from \"./Users\";\nimport classes from \"./UserFinder.module.css\";\nimport UsersContext from \"../store/users-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass UserFinder extends Component {\n  // const { users, updateUsers } = useContext(UsersContext);\n\n  constructor() {\n    super();\n    this.state = {\n      filteredUsers: [],\n      searchTerm: \"\",\n      once: true\n    };\n  }\n  searchChangeHandler(event) {\n    // setSearchTerm(event.target.value);\n    // if (this.state.once === true) {\n    // \tconst needAllUsers = alert(\"Need all users ? \");\n    // \tif (needAllUsers) {\n    // \t\tthis.context.updateUsers();\n    // \t}\n    // \tthis.setState({ once: \"false\" });\n    // }\n\n    this.setState({\n      searchTerm: event.target.value\n    });\n    // this.context.updateUsers();\n  }\n\n  // side effects\n  componentDidMount() {\n    // Do a http request to fetch DUMMY_USERS from DB here...\n\n    console.log(\"Fetch success !! \");\n    this.setState({\n      filteredUsers: this.context.users\n    });\n    console.log(\"rendering all users...\");\n    console.log(\"this.context.updateUsers \", this.context.updateUsers);\n    this.context.updateUsers();\n    this.setState({\n      searchTerm: \"a\"\n    });\n    setTimeout(() => {\n      this.setState({\n        searchTerm: \"\"\n      });\n    }, 300);\n\n    // this.setState({ filteredUsers: this.context.users });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.searchTerm !== this.state.searchTerm) {\n      // cDU will execute on any state change , but this block will execute on searchTerm updation only\n\n      this.setState({\n        filteredUsers: this.context.users.filter(user => user.name.includes(this.state.searchTerm))\n      });\n    }\n  }\n  componentWillUnmount() {\n    console.log(\"UserFinder will unmount !! \");\n  }\n  render() {\n    // const [filteredUsers, setFilteredUsers] = useState(DUMMY_USERS);\n\n    // const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // useEffect(() => {\n    // \tsetFilteredUsers(DUMMY_USERS.filter((user) => user.name.includes(searchTerm)));\n    // }, [searchTerm]);\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.finder,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"search\",\n          onChange: this.searchChangeHandler.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Users, {\n        users: this.state.filteredUsers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 4\n    }, this);\n  }\n}\nUserFinder.contextType = UsersContext;\nexport default UserFinder;","map":{"version":3,"names":["Fragment","Component","Users","classes","UsersContext","UserFinder","constructor","state","filteredUsers","searchTerm","once","searchChangeHandler","event","setState","target","value","componentDidMount","console","log","context","users","updateUsers","setTimeout","componentDidUpdate","prevProps","prevState","filter","user","name","includes","componentWillUnmount","render","finder","bind","contextType"],"sources":["/Users/enrique/Downloads/classBasedComp/src/components/UserFinder.js"],"sourcesContent":["//\n// import { Fragment, useState, useEffect } from \"react\";\n\n// import Users from \"./Users\";\n\n// import classes from \"./UserFinder.module.css\";\n\n// const DUMMY_USERS = [\n// \t{ id: \"u1\", name: \"Max\" },\n// \t{ id: \"u2\", name: \"Manuel\" },\n// \t{ id: \"u3\", name: \"Julie\" },\n// ];\n\n// const UserFinder = () => {\n// \tconst [filteredUsers, setFilteredUsers] = useState(DUMMY_USERS);\n\n// \tconst [searchTerm, setSearchTerm] = useState(\"\");\n\n// \tuseEffect(() => {\n// \t\tsetFilteredUsers(DUMMY_USERS.filter((user) => user.name.includes(searchTerm)));\n// \t}, [searchTerm]);\n\n// \tconst searchChangeHandler = (event) => {\n// \t\tsetSearchTerm(event.target.value);\n// \t};\n\n// \treturn (\n// \t\t<Fragment>\n// \t\t\t<div className={classes.finder}>\n// \t\t\t\t<input type=\"search\" onChange={searchChangeHandler} />\n// \t\t\t</div>\n// \t\t\t<Users users={filteredUsers} />\n// \t\t</Fragment>\n// \t);\n// };\n\n// export default UserFinder;\n\nimport { Fragment, Component } from \"react\";\n\nimport Users from \"./Users\";\n\nimport classes from \"./UserFinder.module.css\";\n\nimport UsersContext from \"../store/users-context\";\n\nclass UserFinder extends Component {\n\t// const { users, updateUsers } = useContext(UsersContext);\n\n\tstatic contextType = UsersContext;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tfilteredUsers: [],\n\t\t\tsearchTerm: \"\",\n\t\t\tonce: true,\n\t\t};\n\t}\n\n\tsearchChangeHandler(event) {\n\t\t// setSearchTerm(event.target.value);\n\t\t// if (this.state.once === true) {\n\t\t// \tconst needAllUsers = alert(\"Need all users ? \");\n\t\t// \tif (needAllUsers) {\n\t\t// \t\tthis.context.updateUsers();\n\t\t// \t}\n\t\t// \tthis.setState({ once: \"false\" });\n\t\t// }\n\n\t\tthis.setState({ searchTerm: event.target.value });\n\t\t// this.context.updateUsers();\n\t}\n\n\t// side effects\n\tcomponentDidMount() {\n\t\t// Do a http request to fetch DUMMY_USERS from DB here...\n\n\t\tconsole.log(\"Fetch success !! \");\n\n\t\tthis.setState({ filteredUsers: this.context.users });\n\t\tconsole.log(\"rendering all users...\");\n\t\tconsole.log(\"this.context.updateUsers \", this.context.updateUsers);\n\t\tthis.context.updateUsers();\n\t\tthis.setState({ searchTerm: \"a\" });\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({ searchTerm: \"\" });\n\t\t}, 300);\n\n\t\t// this.setState({ filteredUsers: this.context.users });\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (prevState.searchTerm !== this.state.searchTerm) {\n\t\t\t// cDU will execute on any state change , but this block will execute on searchTerm updation only\n\n\t\t\tthis.setState({\n\t\t\t\tfilteredUsers: this.context.users.filter((user) => user.name.includes(this.state.searchTerm)),\n\t\t\t});\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconsole.log(\"UserFinder will unmount !! \");\n\t}\n\n\trender() {\n\t\t// const [filteredUsers, setFilteredUsers] = useState(DUMMY_USERS);\n\n\t\t// const [searchTerm, setSearchTerm] = useState(\"\");\n\n\t\t// useEffect(() => {\n\t\t// \tsetFilteredUsers(DUMMY_USERS.filter((user) => user.name.includes(searchTerm)));\n\t\t// }, [searchTerm]);\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<div className={classes.finder}>\n\t\t\t\t\t<input type=\"search\" onChange={this.searchChangeHandler.bind(this)} />\n\t\t\t\t</div>\n\n\t\t\t\t<Users users={this.state.filteredUsers} />\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default UserFinder;\n"],"mappings":";AAAA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAOC,KAAK,MAAM,SAAS;AAE3B,OAAOC,OAAO,MAAM,yBAAyB;AAE7C,OAAOC,YAAY,MAAM,wBAAwB;AAAC;AAElD,MAAMC,UAAU,SAASJ,SAAS,CAAC;EAClC;;EAIAK,WAAW,GAAG;IACb,KAAK,EAAE;IAEP,IAAI,CAACC,KAAK,GAAG;MACZC,aAAa,EAAE,EAAE;MACjBC,UAAU,EAAE,EAAE;MACdC,IAAI,EAAE;IACP,CAAC;EACF;EAEAC,mBAAmB,CAACC,KAAK,EAAE;IAC1B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,IAAI,CAACC,QAAQ,CAAC;MAAEJ,UAAU,EAAEG,KAAK,CAACE,MAAM,CAACC;IAAM,CAAC,CAAC;IACjD;EACD;;EAEA;EACAC,iBAAiB,GAAG;IACnB;;IAEAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAEhC,IAAI,CAACL,QAAQ,CAAC;MAAEL,aAAa,EAAE,IAAI,CAACW,OAAO,CAACC;IAAM,CAAC,CAAC;IACpDH,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrCD,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE,IAAI,CAACC,OAAO,CAACE,WAAW,CAAC;IAClE,IAAI,CAACF,OAAO,CAACE,WAAW,EAAE;IAC1B,IAAI,CAACR,QAAQ,CAAC;MAAEJ,UAAU,EAAE;IAAI,CAAC,CAAC;IAClCa,UAAU,CAAC,MAAM;MAChB,IAAI,CAACT,QAAQ,CAAC;QAAEJ,UAAU,EAAE;MAAG,CAAC,CAAC;IAClC,CAAC,EAAE,GAAG,CAAC;;IAEP;EACD;;EAEAc,kBAAkB,CAACC,SAAS,EAAEC,SAAS,EAAE;IACxC,IAAIA,SAAS,CAAChB,UAAU,KAAK,IAAI,CAACF,KAAK,CAACE,UAAU,EAAE;MACnD;;MAEA,IAAI,CAACI,QAAQ,CAAC;QACbL,aAAa,EAAE,IAAI,CAACW,OAAO,CAACC,KAAK,CAACM,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACtB,KAAK,CAACE,UAAU,CAAC;MAC7F,CAAC,CAAC;IACH;EACD;EAEAqB,oBAAoB,GAAG;IACtBb,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC3C;EAEAa,MAAM,GAAG;IACR;;IAEA;;IAEA;IACA;IACA;;IAEA,oBACC,QAAC,QAAQ;MAAA,wBACR;QAAK,SAAS,EAAE5B,OAAO,CAAC6B,MAAO;QAAA,uBAC9B;UAAO,IAAI,EAAC,QAAQ;UAAC,QAAQ,EAAE,IAAI,CAACrB,mBAAmB,CAACsB,IAAI,CAAC,IAAI;QAAE;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QACjE,eAEN,QAAC,KAAK;QAAC,KAAK,EAAE,IAAI,CAAC1B,KAAK,CAACC;MAAc;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAChC;EAEb;AACD;AAhFMH,UAAU,CAGR6B,WAAW,GAAG9B,YAAY;AA+ElC,eAAeC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}